geom_point(data=onteval,aes(x=Date, y=cases), color="black") +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast.1), color="darkorchid1", size=1.2) +
geom_point(data=onteval,aes(x=Date, y=cases), color="black") +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel2<-Arima(ontts, order=c(14,1,0), seasonal=c(3,1,0), lambda="auto")
arimamodel2
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,"periodic")
plot(stl_ontts)
plot(stl_ontts, major.ticks = "weeks")
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
autoplot(stl_ontts)
autoplot()
?stl()
plot.stl(stl_ontts)
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attributes(ontts)
?xts()
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency = 7)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency = 7)
?plot.xts()
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,"periodic")
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition", major.format="%b-%d-%Y")
?xts()
?stl()
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
stl_ontts <-stl(ontts,s.window=7)
frequency(ontts)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency=7)
frequency(ontts)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency="7")
frequency(ontts)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency=365)
frequency(ontts)
ontts
?xts()
class(ontts)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency=365)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,s.window=7)
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date, frequency=365)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,s.window=7)
attr(ontts, 'frequency') <-1
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
attributes(stl_ontts)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,s.window=7)
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
stl_ontts <-stl(ontts,"periodic")
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
?stl()
stl_ontts
?msts()
periodicity(stl_ontts)
periodicity(ontts)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
periodicity(ontts)
frequency(ontts)
df<-stl_ontts$time.series
sf
df
df<-as.data.frame(stl_ontts$time.series)
sf
df
plot(df)
df<-as.xts(df)
df<-cbind(ontcases$date, df)
df<-cbind(onttrain, df)
df
df<-as.xts(df)
?stl()
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,"periodic")
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
ontts_sa<-xts((onttrain$cases -stl_ontts$time.series[,1]), order.by=onttrai
ggsave("data/decomp.png", plot=last_plot(),width=8,height=4.5,dpi=200)
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
ggsave("data/decomp.png", plot=last_plot(),width=8,height=4.5,dpi=200)
png(, width=8, height=4.5, dpi=200)
png(, width=8, height=4.5)
plot(stl_ontts)
onttrain
dow("2020-11-01"")
stl_ontts
mutate(onttrain, dow=weekdays(Date)
)
mutate(df, dow=weekdays(Date)
)
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
View(ontcases)
ontcases$Date <- mdy(ontcases$Date)
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "bbmle", "blob", "bookdown", "broom", "bslib", "cachem", "cancensus", "cansim", "car", "cli", "conquer", "coronavirus", "corrplot", "covid19.analytics", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "e1071", "fitdistrplus", "generics", "gert", "ggsignif", "glue", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jqr", "jsonvalidate", "knitr", "later", "lattice", "lifecycle", "lmtest", "lubridate", "magick", "maptools", "matrixStats", "MCMCpack", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "officedown", "officer", "openssl", "pillar", "pkgload", "plotly", "pomp", "protolite", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rgdal", "rgeos", "ridge", "rlang", "rmarkdown", "roxygen2", "RSQLite", "Rttf2pt1", "rvest", "s2", "sessioninfo", "sf", "shiny", "shinydashboard", "sp", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tseries", "tzdb", "usethis", "utf8", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ontcases$Date <- mdy(ontcases$Date)
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
View(ontcases)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
head(ontacases,-1)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
View(ontcases)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases<-ontcases[1:(n-1),]
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases) %>%slice(,1:(n()-1))
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases) %>% filter(row_number() <=n()-1)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
library(tidyverse)
library(zoo)
library(ggthemes)
library(lubridate)
library(xts)
library(forecast)
library(rtweet)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-18") %>% select(Date, cases)
ontts <-xts(onttrain$cases, order.by=onttrain$Date)
attr(ontts, 'frequency') <-7
stl_ontts <-stl(ontts,"periodic")
plot(stl_ontts, main = "Ontario Covid Cases Time Series Decomposition")
ontts_sa<-xts((onttrain$cases -stl_ontts$time.series[,1]), order.by=onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-18") %>% select(Date, cases)
auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto")
arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases) %>% filter(row_number() <=n()-1)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
#arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
accessed_date<-format(as.POSIXlt(Sys.time(), "EST5EDT" ),"%b %d")
ontcases<- read.csv("Full COVID-19 Summary Data for Ontario.csv") %>% rename("cases" = "Change.in.cases") %>% select(Date, cases) %>% filter(row_number() <=n()-1)
ontcases$Date <- mdy(ontcases$Date)
onttrain <-filter(ontcases, Date <="2021-11-01") %>% select(Date, cases)
ontts <-xts(onttrain$cases, onttrain$Date)
attr(ontts, 'frequency') <-7
onteval<-filter(ontcases, Date >"2021-11-01") %>% select(Date, cases)
#arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
#arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
arimamodel
arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto", start.p=10)
arimamodel
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel<-Arima(ontts, order=c(14,1,0), lambda="auto")
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel<-auto.arima(ontts, stationary = FALSE,  seasonal=TRUE, lambda = "auto", start.p=14)
fc<-forecast(arimamodel,h=14)
plotdata<-data.frame(fc, Date=seq.Date(max(onttrain$Date) + 1, by="1 day", length.out=14))
ggplot() +
geom_line(data=filter(onttrain, Date>"2021-08-01"),aes(x=Date, y=cases), size=1.2, alpha=0.7) +
geom_ribbon(data=plotdata, aes(x=Date,ymin=Lo.95, ymax=Hi.95), fill="mediumorchid1", alpha=0.2) +
geom_line(data=plotdata,aes(x=Date, y=Point.Forecast), color="mediumorchid1", size=1.2) +
geom_line(data=onteval,aes(x=Date, y=cases), color="black", size=1.2, alpha=0.7) +
scale_x_date(breaks = scales::pretty_breaks(n = 12)) +
expand_limits(y=0) +
theme_fivethirtyeight()+
ylab("Ontario Covid Cases") +
ggtitle("COVID-19 Cases Per Day with ARIMA(14,1,0) Forecast")
arimamodel
